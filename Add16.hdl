// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/Add16.hdl
/**
 * 16-bit adder: Adds two 16-bit two's complement values.
 * The most significant carry bit is ignored.
 */
CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:

    //// calc carrys for carry lookahead...

    Xor(a=a[0],b=b[0],out=P0);
    And(a=a[0],b=b[0],out=G0);
    Xor(a=a[1],b=b[1],out=P1);
    And(a=a[1],b=b[1],out=G1);
    Xor(a=a[2],b=b[2],out=P2);
    And(a=a[2],b=b[2],out=G2);
    Xor(a=a[3],b=b[3],out=P3);
    And(a=a[3],b=b[3],out=G3);
    Xor(a=a[4],b=b[4],out=P4);
    And(a=a[4],b=b[4],out=G4);
    Xor(a=a[5],b=b[5],out=P5);
    And(a=a[5],b=b[5],out=G5);
    Xor(a=a[6],b=b[6],out=P6);
    And(a=a[6],b=b[6],out=G6);
    Xor(a=a[7],b=b[7],out=P7);
    And(a=a[7],b=b[7],out=G7);
    Xor(a=a[8],b=b[8],out=P8);
    And(a=a[8],b=b[8],out=G8);
    Xor(a=a[9],b=b[9],out=P9);
    And(a=a[9],b=b[9],out=G9);
    Xor(a=a[10],b=b[10],out=P10);
    And(a=a[10],b=b[10],out=G10);
    Xor(a=a[11],b=b[11],out=P11);
    And(a=a[11],b=b[11],out=G11);
    Xor(a=a[12],b=b[12],out=P12);
    And(a=a[12],b=b[12],out=G12);
    Xor(a=a[13],b=b[13],out=P13);
    And(a=a[13],b=b[13],out=G13);
    Xor(a=a[14],b=b[14],out=P14);
    And(a=a[14],b=b[14],out=G14);
    Xor(a=a[15],b=b[15],out=P15);
    And(a=a[15],b=b[15],out=G15);

  
    //C1:
    And(a=cin, b=P0, out=C1-1);
    Or(a=G0, b=C1-1, out=C1);
    
    //C2:
    //// P1 P0 cin
    And(a=cin, b=P0, out=C2-1);
    And(a=P1, b=C2-1, out=C2-2);
 
    And(a=G0, b=P1, out=C2-3);
    
    Or(a=C2-3,b=C2-2,out=C2-4);
    Or(a=G1, b=C2-4, out=C2);


    //C3:
    And(a=cin, b=P0, out=C3-1);
    And(a=P1, b=P2, out=C3-2);
    And(a=C3-2, b=C3-1, out=C3-3); //*

    And(a=P1, b=P2, out=C3-4);
    And(a=G0, b=C3-4, out=C3-5);//*

    And(a=G1, b=P2, out=C3-6);//*

    Or(a=C3-3, b=C3-5, out=C3-7);
    Or(a=C3-6, b=C3-7, out=C3-8);
    Or(a=G2, b=C3-8, out=C3);

    
    //C4:
    And(a=cin, b=P0, out=C4-1);
    And(a=P1, b=P2, out=C4-2);
    And(a=C4-2, b=C4-1, out=C4-3); 
    And(a=C4-3, b=P3, out=C4-4); //*

    And(a=P1, b=P2, out=C4-5);
    And(a=G0, b=P3, out=C4-6);
    And(a=C4-5, b=C4-6, out=C4-7); //*

    And(a=G1, b=P3, out=C4-8);
    And(a=C4-8, b=P2, out=C4-9);//*

    And(a=G2,b=P3,out=C4-10);//*

    Or(a=C4-10, b=C4-9, out=C4-11);
    Or(a=C4-4, b=C4-7, out=C4-12);
    Or(a=C4-11, b=C4-12, out=C4-13);
    Or(a=G3, b=C4-13, out=C4);

    //C5

    FullAdder(a=a[0], b=b[0], c=false, sum=out[0], carry=false);
    FullAdder(a=a[1], b=b[1], c=C1, sum=out[1], carry=false);
    FullAdder(a=a[2], b=b[2], c=C2, sum=out[2], carry=false);
    FullAdder(a=a[3], b=b[3], c=C3, sum=out[3], carry=false);
    FullAdder(a=a[4], b=b[4], c=C4, sum=out[4], carry=false);
    FullAdder(a=a[5], b=b[5], c=C5, sum=out[5], carry=false);
    FullAdder(a=a[6], b=b[6], c=C6, sum=out[6], carry=false);
    FullAdder(a=a[7], b=b[7], c=C7, sum=out[7], carry=false);
    FullAdder(a=a[8], b=b[8], c=C8, sum=out[8], carry=false);
    FullAdder(a=a[9], b=b[9], c=C9, sum=out[9], carry=false);
    FullAdder(a=a[10], b=b[10], c=C10, sum=out[10], carry=false);
    FullAdder(a=a[11], b=b[11], c=C11, sum=out[11], carry=false);
    FullAdder(a=a[12], b=b[12], c=C12, sum=out[12], carry=false);
    FullAdder(a=a[13], b=b[13], c=C13, sum=out[13], carry=false);
    FullAdder(a=a[14], b=b[14], c=C14, sum=out[14], carry=false);
    FullAdder(a=a[15], b=b[15], c=C15, sum=out[15], carry=cout);



    // FullAdder(a=a[0], b=b[0], c=C1, sum=out[0], carry=false)
    // FullAdder(a=a[1], b=b[1], c=C2, sum=out[1], carry=false)
    // FullAdder(a=a[2], b=b[2], c=C3, sum=out[2], carry=false)
    // FullAdder(a=a[3], b=b[3], c=C4, sum=out[3], carry=false)
    






    
}